// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var hb = new headbutt_Headbutt3D();
	var canvas = window.document.getElementById("canvas");
	var scene = new THREE.Scene();
	var cubeMat = new THREE.MeshLambertMaterial({ color : 13369344});
	var cube = new THREE.Mesh(new THREE.BoxGeometry(50,50,50,1,1,1),cubeMat);
	cube.position.set(0,0,0);
	scene.add(cube);
	var this1 = new Float32Array(4);
	this1[0] = -25;
	this1[1] = -25;
	this1[2] = -25;
	var this2 = new Float32Array(4);
	this2[0] = -25;
	this2[1] = -25;
	this2[2] = 25;
	var this3 = new Float32Array(4);
	this3[0] = -25;
	this3[1] = 25;
	this3[2] = -25;
	var this4 = new Float32Array(4);
	this4[0] = -25;
	this4[1] = 25;
	this4[2] = 25;
	var this5 = new Float32Array(4);
	this5[0] = 25;
	this5[1] = -25;
	this5[2] = -25;
	var this6 = new Float32Array(4);
	this6[0] = 25;
	this6[1] = -25;
	this6[2] = 25;
	var this7 = new Float32Array(4);
	this7[0] = 25;
	this7[1] = 25;
	this7[2] = -25;
	var this8 = new Float32Array(4);
	this8[0] = 25;
	this8[1] = 25;
	this8[2] = 25;
	var cubeShape = new headbutt_shapes_Polygon3D([this1,this2,this3,this4,this5,this6,this7,this8]);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(20),new THREE.MeshLambertMaterial({ color : 204}));
	sphere.position.set(50,0,0);
	scene.add(sphere);
	var this9 = new Float32Array(4);
	this9[0] = 50;
	this9[1] = 0;
	this9[2] = 0;
	var sphereShape = new headbutt_shapes_Sphere(this9,20);
	var pointLight = new THREE.PointLight(16777215,1,0);
	pointLight.position.set(100,200,50);
	scene.add(pointLight);
	var ambientLight = new THREE.AmbientLight(4210752);
	scene.add(ambientLight);
	var grid = new THREE.GridHelper(200,25);
	scene.add(grid);
	var camera = new THREE.PerspectiveCamera(70,canvas.clientWidth / canvas.clientHeight,1,1000);
	camera.position.set(75 * Math.cos(Math.PI / 4),75,75 * Math.sin(Math.PI / 4));
	camera.lookAt(cube.position);
	scene.add(camera);
	var renderer = new THREE.WebGLRenderer({ canvas : canvas});
	var tmp = window.document.body.clientWidth;
	renderer.setSize(tmp,window.document.body.clientHeight);
	renderer.setClearColor(16777215);
	window.document.body.appendChild(renderer.domElement);
	var t = 0;
	var speed = 0.1;
	var update = null;
	update = function(f) {
		window.requestAnimationFrame(update);
		var update1 = window.document.body.clientWidth;
		camera.aspect = update1 / window.document.body.clientHeight;
		var update2 = window.document.body.clientWidth;
		renderer.setSize(update2,window.document.body.clientHeight);
		camera.updateProjectionMatrix();
		sphere.position.x = 50 * Math.sin(2 * Math.PI * t * speed);
		sphere.position.y = 50 * Math.sin(2 * Math.PI * 2 * t * speed);
		sphere.position.z = 50 * Math.sin(2 * Math.PI * 4 * t * speed);
		sphereShape.get_centre()[0] = sphere.position.x;
		sphereShape.get_centre()[1] = sphere.position.y;
		sphereShape.get_centre()[2] = sphere.position.z;
		var collision = hb.test(cubeShape,sphereShape);
		cubeMat.setValues({ color : collision ? 52224 : 13369344});
		renderer.render(scene,camera);
		t += 0.016666666666666666;
		return true;
	};
	update(0);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var glm_GLM = function() { };
glm_GLM.__name__ = true;
glm_GLM.lerp = function(a,b,t) {
	return a + t * (b - a);
};
glm_GLM.translate = function(translation,dest) {
	dest[0] = 1;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 0;
	dest[4] = 0;
	dest[5] = 1;
	dest[6] = 0;
	dest[7] = 0;
	dest[8] = 0;
	dest[9] = 0;
	dest[10] = 1;
	dest[11] = 0;
	dest[12] = 0;
	dest[13] = 0;
	dest[14] = 0;
	dest[15] = 1;
	dest[12] = translation[0];
	dest[13] = translation[1];
	dest[14] = translation[2];
	return dest;
};
glm_GLM.rotate = function(rotation,dest) {
	var x2 = rotation[0] + rotation[0];
	var y2 = rotation[1] + rotation[1];
	var z2 = rotation[2] + rotation[2];
	var xx = rotation[0] * x2;
	var xy = rotation[0] * y2;
	var xz = rotation[0] * z2;
	var yy = rotation[1] * y2;
	var yz = rotation[1] * z2;
	var zz = rotation[2] * z2;
	var wx = rotation[3] * x2;
	var wy = rotation[3] * y2;
	var wz = rotation[3] * z2;
	dest[0] = 1 - (yy + zz);
	dest[4] = xy - wz;
	dest[8] = xz + wy;
	dest[12] = 0;
	dest[1] = xy + wz;
	dest[5] = 1 - (xx + zz);
	dest[9] = yz - wx;
	dest[13] = 0;
	dest[2] = xz - wy;
	dest[6] = yz + wx;
	dest[10] = 1 - (xx + yy);
	dest[14] = 0;
	dest[3] = 0;
	dest[7] = 0;
	dest[11] = 0;
	dest[15] = 1;
	return dest;
};
glm_GLM.scale = function(amount,dest) {
	dest[0] = 1;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 0;
	dest[4] = 0;
	dest[5] = 1;
	dest[6] = 0;
	dest[7] = 0;
	dest[8] = 0;
	dest[9] = 0;
	dest[10] = 1;
	dest[11] = 0;
	dest[12] = 0;
	dest[13] = 0;
	dest[14] = 0;
	dest[15] = 1;
	dest[0] = amount[0];
	dest[5] = amount[1];
	dest[10] = amount[2];
	return dest;
};
glm_GLM.transform = function(translation,rotation,scale,dest) {
	var x2 = rotation[0] + rotation[0];
	var y2 = rotation[1] + rotation[1];
	var z2 = rotation[2] + rotation[2];
	var xx = rotation[0] * x2;
	var xy = rotation[0] * y2;
	var xz = rotation[0] * z2;
	var yy = rotation[1] * y2;
	var yz = rotation[1] * z2;
	var zz = rotation[2] * z2;
	var wx = rotation[3] * x2;
	var wy = rotation[3] * y2;
	var wz = rotation[3] * z2;
	dest[0] = (1 - (yy + zz)) * scale[0];
	dest[1] = (xy + wz) * scale[0];
	dest[2] = (xz - wy) * scale[0];
	dest[3] = 0;
	dest[4] = (xy - wz) * scale[1];
	dest[5] = (1 - (xx + zz)) * scale[1];
	dest[6] = (yz + wx) * scale[1];
	dest[7] = 0;
	dest[8] = (xz + wy) * scale[2];
	dest[9] = (yz - wx) * scale[2];
	dest[10] = (1 - (xx + yy)) * scale[2];
	dest[11] = 0;
	dest[12] = translation[0];
	dest[13] = translation[1];
	dest[14] = translation[2];
	dest[15] = 1;
	return dest;
};
glm_GLM.lookAt = function(eye,centre,up,dest) {
	var x0;
	var x1;
	var x2;
	var y0;
	var y1;
	var y2;
	var z0;
	var z1;
	var z2;
	var len;
	if(Math.abs(eye[0] - centre[0]) < glm_GLM.EPSILON && Math.abs(eye[1] - centre[1]) < glm_GLM.EPSILON && Math.abs(eye[2] - centre[2]) < glm_GLM.EPSILON) {
		dest[0] = 1;
		dest[1] = 0;
		dest[2] = 0;
		dest[3] = 0;
		dest[4] = 0;
		dest[5] = 1;
		dest[6] = 0;
		dest[7] = 0;
		dest[8] = 0;
		dest[9] = 0;
		dest[10] = 1;
		dest[11] = 0;
		dest[12] = 0;
		dest[13] = 0;
		dest[14] = 0;
		dest[15] = 1;
		return dest;
	}
	z0 = eye[0] - centre[0];
	z1 = eye[1] - centre[1];
	z2 = eye[2] - centre[2];
	len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	z0 *= len;
	z1 *= len;
	z2 *= len;
	x0 = up[1] * z2 - up[2] * z1;
	x1 = up[2] * z0 - up[0] * z2;
	x2 = up[0] * z1 - up[1] * z0;
	len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
	if(len <= glm_GLM.EPSILON) {
		x0 = 0;
		x1 = 0;
		x2 = 0;
	} else {
		len = 1 / len;
		x0 *= len;
		x1 *= len;
		x2 *= len;
	}
	y0 = z1 * x2 - z2 * x1;
	y1 = z2 * x0 - z0 * x2;
	y2 = z0 * x1 - z1 * x0;
	len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
	if(len <= glm_GLM.EPSILON) {
		y0 = 0;
		y1 = 0;
		y2 = 0;
	} else {
		len = 1 / len;
		y0 *= len;
		y1 *= len;
		y2 *= len;
	}
	dest[0] = x0;
	dest[1] = y0;
	dest[2] = z0;
	dest[3] = 0;
	dest[4] = x1;
	dest[5] = y1;
	dest[6] = z1;
	dest[7] = 0;
	dest[8] = x2;
	dest[9] = y2;
	dest[10] = z2;
	dest[11] = 0;
	dest[12] = -(x0 * eye[0] + x1 * eye[1] + x2 * eye[2]);
	dest[13] = -(y0 * eye[0] + y1 * eye[1] + y2 * eye[2]);
	dest[14] = -(z0 * eye[0] + z1 * eye[1] + z2 * eye[2]);
	dest[15] = 1;
	return dest;
};
glm_GLM.perspective = function(fovy,aspectRatio,near,far,dest) {
	var f = 1 / Math.tan(fovy / 2);
	var nf = 1 / (near - far);
	dest[0] = f / aspectRatio;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 0;
	dest[4] = 0;
	dest[5] = f;
	dest[6] = 0;
	dest[7] = 0;
	dest[8] = 0;
	dest[9] = 0;
	dest[10] = (far + near) * nf;
	dest[11] = -1;
	dest[12] = 0;
	dest[13] = 0;
	dest[14] = 2 * far * near * nf;
	dest[15] = 0;
	return dest;
};
glm_GLM.orthographic = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var fn = 1 / (far - near);
	dest[0] = 2 * rl;
	dest[4] = 0;
	dest[8] = 0;
	dest[12] = -1 * (left + right) * rl;
	dest[1] = 0;
	dest[5] = 2 * tb;
	dest[9] = 0;
	dest[13] = -1 * (top + bottom) * tb;
	dest[2] = 0;
	dest[6] = 0;
	dest[10] = -2 * fn;
	dest[14] = -1 * (far + near) * fn;
	dest[3] = 0;
	dest[7] = 0;
	dest[11] = 0;
	dest[15] = 1;
	return dest;
};
glm_GLM.frustum = function(left,right,bottom,top,near,far,dest) {
	if(far == null) {
		far = 1;
	}
	if(near == null) {
		near = -1;
	}
	var rl = 1 / (right - left);
	var tb = 1 / (top - bottom);
	var nf = 1 / (near - far);
	dest[0] = near * 2 * rl;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 0;
	dest[4] = 0;
	dest[5] = near * 2 * tb;
	dest[6] = 0;
	dest[7] = 0;
	dest[8] = (right + left) * tb;
	dest[9] = (top + bottom) * tb;
	dest[10] = (far + near) * nf;
	dest[11] = -1;
	dest[12] = 0;
	dest[13] = 0;
	dest[14] = far * near * 2 * nf;
	dest[15] = 0;
	return dest;
};
var glm__$Mat4_Mat4_$Impl_$ = {};
glm__$Mat4_Mat4_$Impl_$.__name__ = true;
glm__$Mat4_Mat4_$Impl_$._new = function(_r0c0,_r0c1,_r0c2,_r0c3,_r1c0,_r1c1,_r1c2,_r1c3,_r2c0,_r2c1,_r2c2,_r2c3,_r3c0,_r3c1,_r3c2,_r3c3) {
	if(_r3c3 == null) {
		_r3c3 = 0;
	}
	if(_r3c2 == null) {
		_r3c2 = 0;
	}
	if(_r3c1 == null) {
		_r3c1 = 0;
	}
	if(_r3c0 == null) {
		_r3c0 = 0;
	}
	if(_r2c3 == null) {
		_r2c3 = 0;
	}
	if(_r2c2 == null) {
		_r2c2 = 0;
	}
	if(_r2c1 == null) {
		_r2c1 = 0;
	}
	if(_r2c0 == null) {
		_r2c0 = 0;
	}
	if(_r1c3 == null) {
		_r1c3 = 0;
	}
	if(_r1c2 == null) {
		_r1c2 = 0;
	}
	if(_r1c1 == null) {
		_r1c1 = 0;
	}
	if(_r1c0 == null) {
		_r1c0 = 0;
	}
	if(_r0c3 == null) {
		_r0c3 = 0;
	}
	if(_r0c2 == null) {
		_r0c2 = 0;
	}
	if(_r0c1 == null) {
		_r0c1 = 0;
	}
	if(_r0c0 == null) {
		_r0c0 = 0;
	}
	var this1 = new Float32Array(16);
	this1[0] = _r0c0;
	this1[1] = _r1c0;
	this1[2] = _r2c0;
	this1[3] = _r3c0;
	this1[4] = _r0c1;
	this1[5] = _r1c1;
	this1[6] = _r2c1;
	this1[7] = _r3c1;
	this1[8] = _r0c2;
	this1[9] = _r1c2;
	this1[10] = _r2c2;
	this1[11] = _r3c2;
	this1[12] = _r0c3;
	this1[13] = _r1c3;
	this1[14] = _r2c3;
	this1[15] = _r3c3;
	return this1;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c0 = function(this1) {
	return this1[0];
};
glm__$Mat4_Mat4_$Impl_$.set_r0c0 = function(this1,v) {
	return this1[0] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c0 = function(this1) {
	return this1[1];
};
glm__$Mat4_Mat4_$Impl_$.set_r1c0 = function(this1,v) {
	return this1[1] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c0 = function(this1) {
	return this1[2];
};
glm__$Mat4_Mat4_$Impl_$.set_r2c0 = function(this1,v) {
	return this1[2] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c0 = function(this1) {
	return this1[3];
};
glm__$Mat4_Mat4_$Impl_$.set_r3c0 = function(this1,v) {
	return this1[3] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c1 = function(this1) {
	return this1[4];
};
glm__$Mat4_Mat4_$Impl_$.set_r0c1 = function(this1,v) {
	return this1[4] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c1 = function(this1) {
	return this1[5];
};
glm__$Mat4_Mat4_$Impl_$.set_r1c1 = function(this1,v) {
	return this1[5] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c1 = function(this1) {
	return this1[6];
};
glm__$Mat4_Mat4_$Impl_$.set_r2c1 = function(this1,v) {
	return this1[6] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c1 = function(this1) {
	return this1[7];
};
glm__$Mat4_Mat4_$Impl_$.set_r3c1 = function(this1,v) {
	return this1[7] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c2 = function(this1) {
	return this1[8];
};
glm__$Mat4_Mat4_$Impl_$.set_r0c2 = function(this1,v) {
	return this1[8] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c2 = function(this1) {
	return this1[9];
};
glm__$Mat4_Mat4_$Impl_$.set_r1c2 = function(this1,v) {
	return this1[9] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c2 = function(this1) {
	return this1[10];
};
glm__$Mat4_Mat4_$Impl_$.set_r2c2 = function(this1,v) {
	return this1[10] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c2 = function(this1) {
	return this1[11];
};
glm__$Mat4_Mat4_$Impl_$.set_r3c2 = function(this1,v) {
	return this1[11] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r0c3 = function(this1) {
	return this1[12];
};
glm__$Mat4_Mat4_$Impl_$.set_r0c3 = function(this1,v) {
	return this1[12] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r1c3 = function(this1) {
	return this1[13];
};
glm__$Mat4_Mat4_$Impl_$.set_r1c3 = function(this1,v) {
	return this1[13] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r2c3 = function(this1) {
	return this1[14];
};
glm__$Mat4_Mat4_$Impl_$.set_r2c3 = function(this1,v) {
	return this1[14] = v;
};
glm__$Mat4_Mat4_$Impl_$.get_r3c3 = function(this1) {
	return this1[15];
};
glm__$Mat4_Mat4_$Impl_$.set_r3c3 = function(this1,v) {
	return this1[15] = v;
};
glm__$Mat4_Mat4_$Impl_$.get = function(this1,key) {
	return this1[key];
};
glm__$Mat4_Mat4_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
glm__$Mat4_Mat4_$Impl_$.equals = function(this1,b) {
	var equal = true;
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(Math.abs(this1[i] - b[i]) >= glm_GLM.EPSILON) {
			equal = false;
			break;
		}
	}
	return equal;
};
glm__$Mat4_Mat4_$Impl_$.toString = function(this1) {
	return "[" + this1[0] + ", " + this1[4] + ", " + this1[8] + ", " + this1[12] + "]\n" + ("[" + this1[1] + ", " + this1[5] + ", " + this1[9] + ", " + this1[13] + "]\n") + ("[" + this1[2] + ", " + this1[6] + ", " + this1[10] + ", " + this1[14] + "]\n") + ("[" + this1[3] + ", " + this1[7] + ", " + this1[11] + ", " + this1[15] + "]\n");
};
glm__$Mat4_Mat4_$Impl_$.identity = function(dest) {
	dest[0] = 1;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 0;
	dest[4] = 0;
	dest[5] = 1;
	dest[6] = 0;
	dest[7] = 0;
	dest[8] = 0;
	dest[9] = 0;
	dest[10] = 1;
	dest[11] = 0;
	dest[12] = 0;
	dest[13] = 0;
	dest[14] = 0;
	dest[15] = 1;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.copy = function(src,dest) {
	dest[0] = src[0];
	dest[1] = src[1];
	dest[2] = src[2];
	dest[3] = src[3];
	dest[4] = src[4];
	dest[5] = src[5];
	dest[6] = src[6];
	dest[7] = src[7];
	dest[8] = src[8];
	dest[9] = src[9];
	dest[10] = src[10];
	dest[11] = src[11];
	dest[12] = src[12];
	dest[13] = src[13];
	dest[14] = src[14];
	dest[15] = src[15];
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.transpose = function(src,dest) {
	var src01 = src[1];
	var src02 = src[2];
	var src03 = src[3];
	var src12 = src[6];
	var src13 = src[7];
	var src23 = src[11];
	dest[0] = src[0];
	dest[1] = src[4];
	dest[2] = src[8];
	dest[3] = src[12];
	dest[4] = src01;
	dest[5] = src[5];
	dest[6] = src[9];
	dest[7] = src[13];
	dest[8] = src02;
	dest[9] = src12;
	dest[10] = src[10];
	dest[11] = src[14];
	dest[12] = src03;
	dest[13] = src13;
	dest[14] = src23;
	dest[15] = src[15];
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.determinant = function(src) {
	var a00 = src[0];
	var a01 = src[1];
	var a02 = src[2];
	var a03 = src[3];
	var a10 = src[4];
	var a11 = src[5];
	var a12 = src[6];
	var a13 = src[7];
	var a20 = src[8];
	var a21 = src[9];
	var a22 = src[10];
	var a23 = src[11];
	var a30 = src[12];
	var a31 = src[13];
	var a32 = src[14];
	var a33 = src[15];
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
glm__$Mat4_Mat4_$Impl_$.invert = function(src,dest) {
	var a00 = src[0];
	var a01 = src[4];
	var a02 = src[8];
	var a03 = src[12];
	var a10 = src[1];
	var a11 = src[5];
	var a12 = src[9];
	var a13 = src[13];
	var a20 = src[2];
	var a21 = src[6];
	var a22 = src[10];
	var a23 = src[14];
	var a30 = src[3];
	var a31 = src[7];
	var a32 = src[11];
	var a33 = src[15];
	var t00 = a12 * a23 * a31 - a13 * a22 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 + a11 * a22 * a33;
	var t01 = a03 * a22 * a31 - a02 * a23 * a31 - a03 * a21 * a32 + a01 * a23 * a32 + a02 * a21 * a33 - a01 * a22 * a33;
	var t02 = a02 * a13 * a31 - a03 * a12 * a31 + a03 * a11 * a32 - a01 * a13 * a32 - a02 * a11 * a33 + a01 * a12 * a33;
	var t03 = a03 * a12 * a21 - a02 * a13 * a21 - a03 * a11 * a22 + a01 * a13 * a22 + a02 * a11 * a23 - a01 * a12 * a23;
	var det = a00 * t00 + a10 * t01 + a20 * t02 + a30 * t03;
	if(Math.abs(det) <= glm_GLM.EPSILON) {
		throw new js__$Boot_HaxeError("Can't invert matrix, det (" + det + ") is too small!");
	}
	var idet = 1 / det;
	dest[0] = t00 * idet;
	dest[1] = (a13 * a22 * a30 - a12 * a23 * a30 - a13 * a20 * a32 + a10 * a23 * a32 + a12 * a20 * a33 - a10 * a22 * a33) * idet;
	dest[2] = (a11 * a23 * a30 - a13 * a21 * a30 + a13 * a20 * a31 - a10 * a23 * a31 - a11 * a20 * a33 + a10 * a21 * a33) * idet;
	dest[3] = (a12 * a21 * a30 - a11 * a22 * a30 - a12 * a20 * a31 + a10 * a22 * a31 + a11 * a20 * a32 - a10 * a21 * a32) * idet;
	dest[4] = t01 * idet;
	dest[5] = (a02 * a23 * a30 - a03 * a22 * a30 + a03 * a20 * a32 - a00 * a23 * a32 - a02 * a20 * a33 + a00 * a22 * a33) * idet;
	dest[6] = (a03 * a21 * a30 - a01 * a23 * a30 - a03 * a20 * a31 + a00 * a23 * a31 + a01 * a20 * a33 - a00 * a21 * a33) * idet;
	dest[7] = (a01 * a22 * a30 - a02 * a21 * a30 + a02 * a20 * a31 - a00 * a22 * a31 - a01 * a20 * a32 + a00 * a21 * a32) * idet;
	dest[8] = t02 * idet;
	dest[9] = (a03 * a12 * a30 - a02 * a13 * a30 - a03 * a10 * a32 + a00 * a13 * a32 + a02 * a10 * a33 - a00 * a12 * a33) * idet;
	dest[10] = (a01 * a13 * a30 - a03 * a11 * a30 + a03 * a10 * a31 - a00 * a13 * a31 - a01 * a10 * a33 + a00 * a11 * a33) * idet;
	dest[11] = (a02 * a11 * a30 - a01 * a12 * a30 - a02 * a10 * a31 + a00 * a12 * a31 + a01 * a10 * a32 - a00 * a11 * a32) * idet;
	dest[12] = t03 * idet;
	dest[13] = (a02 * a13 * a20 - a03 * a12 * a20 + a03 * a10 * a22 - a00 * a13 * a22 - a02 * a10 * a23 + a00 * a12 * a23) * idet;
	dest[14] = (a03 * a11 * a20 - a01 * a13 * a20 - a03 * a10 * a21 + a00 * a13 * a21 + a01 * a10 * a23 - a00 * a11 * a23) * idet;
	dest[15] = (a01 * a12 * a20 - a02 * a11 * a20 + a02 * a10 * a21 - a00 * a12 * a21 - a01 * a10 * a22 + a00 * a11 * a22) * idet;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMat = function(a,b,dest) {
	var a00 = a[0];
	var a01 = a[1];
	var a02 = a[2];
	var a03 = a[3];
	var a10 = a[4];
	var a11 = a[5];
	var a12 = a[6];
	var a13 = a[7];
	var a20 = a[8];
	var a21 = a[9];
	var a22 = a[10];
	var a23 = a[11];
	var a30 = a[12];
	var a31 = a[13];
	var a32 = a[14];
	var a33 = a[15];
	var b00 = b[0];
	var b01 = b[1];
	var b02 = b[2];
	var b03 = b[3];
	var b10 = b[4];
	var b11 = b[5];
	var b12 = b[6];
	var b13 = b[7];
	var b20 = b[8];
	var b21 = b[9];
	var b22 = b[10];
	var b23 = b[11];
	var b30 = b[12];
	var b31 = b[13];
	var b32 = b[14];
	var b33 = b[15];
	dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
	dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
	dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
	dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
	dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
	dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
	dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
	dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
	dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
	dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
	dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
	dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
	dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
	dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
	dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
	dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multMatOp = function(a,b) {
	var this1 = new Float32Array(16);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	var dest = this1;
	var a00 = a[0];
	var a01 = a[1];
	var a02 = a[2];
	var a03 = a[3];
	var a10 = a[4];
	var a11 = a[5];
	var a12 = a[6];
	var a13 = a[7];
	var a20 = a[8];
	var a21 = a[9];
	var a22 = a[10];
	var a23 = a[11];
	var a30 = a[12];
	var a31 = a[13];
	var a32 = a[14];
	var a33 = a[15];
	var b00 = b[0];
	var b01 = b[1];
	var b02 = b[2];
	var b03 = b[3];
	var b10 = b[4];
	var b11 = b[5];
	var b12 = b[6];
	var b13 = b[7];
	var b20 = b[8];
	var b21 = b[9];
	var b22 = b[10];
	var b23 = b[11];
	var b30 = b[12];
	var b31 = b[13];
	var b32 = b[14];
	var b33 = b[15];
	dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
	dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
	dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
	dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
	dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
	dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
	dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
	dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
	dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
	dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
	dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
	dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
	dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
	dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
	dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
	dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVec = function(m,v,dest) {
	var x = v[0];
	var y = v[1];
	var z = v[2];
	var w = v[3];
	dest[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	dest[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	dest[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	dest[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	return dest;
};
glm__$Mat4_Mat4_$Impl_$.multVecOp = function(m,v) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	var x = v[0];
	var y = v[1];
	var z = v[2];
	var w = v[3];
	dest[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	dest[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	dest[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	dest[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	return dest;
};
var glm__$Quat_Quat_$Impl_$ = {};
glm__$Quat_Quat_$Impl_$.__name__ = true;
glm__$Quat_Quat_$Impl_$.get_x = function(this1) {
	return this1[0];
};
glm__$Quat_Quat_$Impl_$.set_x = function(this1,v) {
	return this1[0] = v;
};
glm__$Quat_Quat_$Impl_$.get_y = function(this1) {
	return this1[1];
};
glm__$Quat_Quat_$Impl_$.set_y = function(this1,v) {
	return this1[1] = v;
};
glm__$Quat_Quat_$Impl_$.get_z = function(this1) {
	return this1[2];
};
glm__$Quat_Quat_$Impl_$.set_z = function(this1,v) {
	return this1[2] = v;
};
glm__$Quat_Quat_$Impl_$.get_w = function(this1) {
	return this1[3];
};
glm__$Quat_Quat_$Impl_$.set_w = function(this1,v) {
	return this1[3] = v;
};
glm__$Quat_Quat_$Impl_$.get = function(this1,key) {
	return this1[key];
};
glm__$Quat_Quat_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
glm__$Quat_Quat_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(4);
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
	this1[3] = w;
	return this1;
};
glm__$Quat_Quat_$Impl_$.equals = function(this1,b) {
	var equal = true;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		if(Math.abs(this1[i] - b[i]) >= glm_GLM.EPSILON) {
			equal = false;
			break;
		}
	}
	return equal;
};
glm__$Quat_Quat_$Impl_$.toString = function(this1) {
	return "{" + this1[0] + ", " + this1[1] + ", " + this1[2] + ", " + this1[3] + "}";
};
glm__$Quat_Quat_$Impl_$.lengthSquared = function(this1) {
	return this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2] + this1[3] * this1[3];
};
glm__$Quat_Quat_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2] + this1[3] * this1[3]);
};
glm__$Quat_Quat_$Impl_$.normalize = function(q,dest) {
	var length = Math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest[0] = q[0] * mult;
	dest[1] = q[1] * mult;
	dest[2] = q[2] * mult;
	dest[3] = q[3] * mult;
	return dest;
};
glm__$Quat_Quat_$Impl_$.dot = function(a,b) {
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};
glm__$Quat_Quat_$Impl_$.identity = function(dest) {
	dest[0] = 0;
	dest[1] = 0;
	dest[2] = 0;
	dest[3] = 1;
	return dest;
};
glm__$Quat_Quat_$Impl_$.copy = function(src,dest) {
	dest[0] = src[0];
	dest[1] = src[1];
	dest[2] = src[2];
	dest[3] = src[3];
	return dest;
};
glm__$Quat_Quat_$Impl_$.axisAngle = function(axis,angle,dest) {
	angle *= 0.5;
	var s = Math.sin(angle);
	dest[0] = s * axis[0];
	dest[1] = s * axis[1];
	dest[2] = s * axis[2];
	dest[3] = Math.cos(angle);
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuats = function(a,b,dest) {
	var ax = a[0];
	var ay = a[1];
	var az = a[2];
	var aw = a[3];
	var bx = b[0];
	var by = b[1];
	var bz = b[2];
	var bw = b[3];
	dest[0] = ax * bw + aw * bx + ay * bz - az * by;
	dest[1] = ay * bw + aw * by + az * bx - ax * bz;
	dest[2] = az * bw + aw * bz + ax * by - ay * bx;
	dest[3] = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyQuatsOp = function(a,b) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 1;
	var dest = this1;
	var ax = a[0];
	var ay = a[1];
	var az = a[2];
	var aw = a[3];
	var bx = b[0];
	var by = b[1];
	var bz = b[2];
	var bw = b[3];
	dest[0] = ax * bw + aw * bx + ay * bz - az * by;
	dest[1] = ay * bw + aw * by + az * bx - ax * bz;
	dest[2] = az * bw + aw * bz + ax * by - ay * bx;
	dest[3] = aw * bw - ax * bx - ay * by - az * bz;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	dest[3] = a[3] * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 1;
	var dest = this1;
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	dest[3] = a[3] * s;
	return dest;
};
glm__$Quat_Quat_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a[0];
	dest[0] = a1 + t * (b[0] - a1);
	var a2 = a[1];
	dest[1] = a2 + t * (b[1] - a2);
	var a3 = a[2];
	dest[2] = a3 + t * (b[2] - a3);
	var a4 = a[3];
	dest[3] = a4 + t * (b[3] - a4);
	return dest;
};
glm__$Quat_Quat_$Impl_$.slerp = function(a,b,t,dest) {
	var bx = b[0];
	var by = b[1];
	var bz = b[2];
	var bw = b[3];
	var cosTheta = a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	if(cosTheta < 0) {
		cosTheta = -cosTheta;
		bx = -bx;
		by = -by;
		bz = -bz;
		bw = -bw;
	}
	if(cosTheta > 1 - glm_GLM.EPSILON) {
		var a1 = a[0];
		dest[0] = a1 + t * (b[0] - a1);
		var a2 = a[1];
		dest[1] = a2 + t * (b[1] - a2);
		var a3 = a[2];
		dest[2] = a3 + t * (b[2] - a3);
		var a4 = a[3];
		dest[3] = a4 + t * (b[3] - a4);
		return dest;
	} else {
		var angle = Math.acos(cosTheta);
		var sa = 1 / Math.sin(angle);
		var i = Math.sin((1 - t) * angle);
		var j = Math.sin(t * angle);
		dest[0] = (i * a[0] + j * bx) * sa;
		dest[1] = (i * a[1] + j * by) * sa;
		dest[2] = (i * a[2] + j * bz) * sa;
		dest[3] = (i * a[3] + j * bw) * sa;
		return dest;
	}
};
glm__$Quat_Quat_$Impl_$.invert = function(q,dest) {
	var x = q[0];
	var y = q[1];
	var z = q[2];
	var w = q[3];
	var d = q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3];
	var oneOverD = d < glm_GLM.EPSILON ? 0 : 1 / d;
	dest[0] = -x * oneOverD;
	dest[1] = -y * oneOverD;
	dest[2] = -z * oneOverD;
	dest[3] = w * oneOverD;
	return dest;
};
glm__$Quat_Quat_$Impl_$.conjugate = function(q,dest) {
	dest[0] = -1 * q[0];
	dest[1] = -1 * q[1];
	dest[2] = -1 * q[2];
	dest[3] = q[3];
	return dest;
};
glm__$Quat_Quat_$Impl_$.fromEuler = function(x,y,z,dest) {
	var c1 = Math.cos(x / 2);
	var c2 = Math.cos(y / 2);
	var c3 = Math.cos(z / 2);
	var s1 = Math.sin(x / 2);
	var s2 = Math.sin(y / 2);
	var s3 = Math.sin(z / 2);
	dest[0] = s1 * c2 * c3 + c1 * s2 * s3;
	dest[1] = c1 * s2 * c3 - s1 * c2 * s3;
	dest[2] = c1 * c2 * s3 + s1 * s2 * c3;
	dest[3] = c1 * c2 * c3 - s1 * s2 * s3;
	return dest;
};
var glm__$Vec3_Vec3_$Impl_$ = {};
glm__$Vec3_Vec3_$Impl_$.__name__ = true;
glm__$Vec3_Vec3_$Impl_$.get_x = function(this1) {
	return this1[0];
};
glm__$Vec3_Vec3_$Impl_$.set_x = function(this1,v) {
	return this1[0] = v;
};
glm__$Vec3_Vec3_$Impl_$.get_y = function(this1) {
	return this1[1];
};
glm__$Vec3_Vec3_$Impl_$.set_y = function(this1,v) {
	return this1[1] = v;
};
glm__$Vec3_Vec3_$Impl_$.get_z = function(this1) {
	return this1[2];
};
glm__$Vec3_Vec3_$Impl_$.set_z = function(this1,v) {
	return this1[2] = v;
};
glm__$Vec3_Vec3_$Impl_$.get_r = function(this1) {
	return this1[0];
};
glm__$Vec3_Vec3_$Impl_$.set_r = function(this1,v) {
	return this1[0] = v;
};
glm__$Vec3_Vec3_$Impl_$.get_g = function(this1) {
	return this1[1];
};
glm__$Vec3_Vec3_$Impl_$.set_g = function(this1,v) {
	return this1[1] = v;
};
glm__$Vec3_Vec3_$Impl_$.get_b = function(this1) {
	return this1[2];
};
glm__$Vec3_Vec3_$Impl_$.set_b = function(this1,v) {
	return this1[2] = v;
};
glm__$Vec3_Vec3_$Impl_$.get = function(this1,key) {
	return this1[key];
};
glm__$Vec3_Vec3_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
glm__$Vec3_Vec3_$Impl_$._new = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(4);
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
	return this1;
};
glm__$Vec3_Vec3_$Impl_$.equals = function(this1,b) {
	var equal = true;
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		if(Math.abs(this1[i] - b[i]) >= glm_GLM.EPSILON) {
			equal = false;
			break;
		}
	}
	return equal;
};
glm__$Vec3_Vec3_$Impl_$.toString = function(this1) {
	return "<" + this1[0] + ", " + this1[1] + ", " + this1[2] + ">";
};
glm__$Vec3_Vec3_$Impl_$.lengthSquared = function(this1) {
	return this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2];
};
glm__$Vec3_Vec3_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2]);
};
glm__$Vec3_Vec3_$Impl_$.copy = function(src,dest) {
	dest[0] = src[0];
	dest[1] = src[1];
	dest[2] = src[2];
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.set = function(dest,x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest[0] = x;
	dest[1] = y;
	dest[2] = z;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVec = function(a,b,dest) {
	dest[0] = a[0] + b[0];
	dest[1] = a[1] + b[1];
	dest[2] = a[2] + b[2];
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVec = function(a,b,dest) {
	dest[0] = a[0] - b[0];
	dest[1] = a[1] - b[1];
	dest[2] = a[2] - b[2];
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addVecOp = function(a,b) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] + b[0];
	dest[1] = a[1] + b[1];
	dest[2] = a[2] + b[2];
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] - b[0];
	dest[1] = a[1] - b[1];
	dest[2] = a[2] - b[2];
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalar = function(a,s,dest) {
	dest[0] = a[0] + s;
	dest[1] = a[1] + s;
	dest[2] = a[2] + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] + s;
	dest[1] = a[1] + s;
	dest[2] = a[2] + s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] + s1;
	dest[1] = a[1] + s1;
	dest[2] = a[2] + s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	var dest = this1;
	dest[0] = a[0] * s1;
	dest[1] = a[1] * s1;
	dest[2] = a[2] * s1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.distanceSquared = function(a,b) {
	return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]);
};
glm__$Vec3_Vec3_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]));
};
glm__$Vec3_Vec3_$Impl_$.dot = function(a,b) {
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
glm__$Vec3_Vec3_$Impl_$.cross = function(a,b,dest) {
	var this1 = new Float32Array(4);
	this1[0] = a[1] * b[2] - a[2] * b[1];
	this1[1] = a[2] * b[0] - a[0] * b[2];
	this1[2] = a[0] * b[1] - a[1] * b[0];
	dest = this1;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest[0] = v[0] * mult;
	dest[1] = v[1] * mult;
	dest[2] = v[2] * mult;
	return dest;
};
glm__$Vec3_Vec3_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a[0];
	dest[0] = a1 + t * (b[0] - a1);
	var a2 = a[1];
	dest[1] = a2 + t * (b[1] - a2);
	var a3 = a[2];
	dest[2] = a3 + t * (b[2] - a3);
	return dest;
};
var glm__$Vec4_Vec4_$Impl_$ = {};
glm__$Vec4_Vec4_$Impl_$.__name__ = true;
glm__$Vec4_Vec4_$Impl_$.get_x = function(this1) {
	return this1[0];
};
glm__$Vec4_Vec4_$Impl_$.set_x = function(this1,v) {
	return this1[0] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_y = function(this1) {
	return this1[1];
};
glm__$Vec4_Vec4_$Impl_$.set_y = function(this1,v) {
	return this1[1] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_z = function(this1) {
	return this1[2];
};
glm__$Vec4_Vec4_$Impl_$.set_z = function(this1,v) {
	return this1[2] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_w = function(this1) {
	return this1[3];
};
glm__$Vec4_Vec4_$Impl_$.set_w = function(this1,v) {
	return this1[3] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_r = function(this1) {
	return this1[0];
};
glm__$Vec4_Vec4_$Impl_$.set_r = function(this1,v) {
	return this1[0] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_g = function(this1) {
	return this1[1];
};
glm__$Vec4_Vec4_$Impl_$.set_g = function(this1,v) {
	return this1[1] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_b = function(this1) {
	return this1[2];
};
glm__$Vec4_Vec4_$Impl_$.set_b = function(this1,v) {
	return this1[2] = v;
};
glm__$Vec4_Vec4_$Impl_$.get_a = function(this1) {
	return this1[3];
};
glm__$Vec4_Vec4_$Impl_$.set_a = function(this1,v) {
	return this1[3] = v;
};
glm__$Vec4_Vec4_$Impl_$.get = function(this1,key) {
	return this1[key];
};
glm__$Vec4_Vec4_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
glm__$Vec4_Vec4_$Impl_$._new = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new Float32Array(4);
	this1[0] = x;
	this1[1] = y;
	this1[2] = z;
	this1[3] = w;
	return this1;
};
glm__$Vec4_Vec4_$Impl_$.equals = function(this1,b) {
	var equal = true;
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		if(Math.abs(this1[i] - b[i]) >= glm_GLM.EPSILON) {
			equal = false;
			break;
		}
	}
	return equal;
};
glm__$Vec4_Vec4_$Impl_$.toString = function(this1) {
	return "<" + this1[0] + ", " + this1[1] + ", " + this1[2] + ", " + this1[3] + ">";
};
glm__$Vec4_Vec4_$Impl_$.lengthSquared = function(this1) {
	return this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2] + this1[3] * this1[3];
};
glm__$Vec4_Vec4_$Impl_$.$length = function(this1) {
	return Math.sqrt(this1[0] * this1[0] + this1[1] * this1[1] + this1[2] * this1[2] + this1[3] * this1[3]);
};
glm__$Vec4_Vec4_$Impl_$.copy = function(src,dest) {
	dest[0] = src[0];
	dest[1] = src[1];
	dest[2] = src[2];
	dest[3] = src[3];
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.set = function(dest,x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	dest[0] = x;
	dest[1] = y;
	dest[2] = z;
	dest[3] = w;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVec = function(a,b,dest) {
	dest[0] = a[0] + b[0];
	dest[1] = a[1] + b[1];
	dest[2] = a[2] + b[2];
	dest[3] = a[3] + b[3];
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVec = function(a,b,dest) {
	dest[0] = a[0] - b[0];
	dest[1] = a[1] - b[1];
	dest[2] = a[2] - b[2];
	dest[3] = a[3] - b[3];
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addVecOp = function(a,b) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] + b[0];
	dest[1] = a[1] + b[1];
	dest[2] = a[2] + b[2];
	dest[3] = a[3] + b[3];
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractVecOp = function(a,b) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] - b[0];
	dest[1] = a[1] - b[1];
	dest[2] = a[2] - b[2];
	dest[3] = a[3] - b[3];
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalar = function(a,s,dest) {
	dest[0] = a[0] + s;
	dest[1] = a[1] + s;
	dest[2] = a[2] + s;
	dest[3] = a[3] + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalar = function(a,s,dest) {
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	dest[3] = a[3] * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.addScalarOp = function(a,s) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] + s;
	dest[1] = a[1] + s;
	dest[2] = a[2] + s;
	dest[3] = a[3] + s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.subtractScalarOp = function(a,s) {
	var s1 = -s;
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] + s1;
	dest[1] = a[1] + s1;
	dest[2] = a[2] + s1;
	dest[3] = a[3] + s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.multiplyScalarOp = function(a,s) {
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] * s;
	dest[1] = a[1] * s;
	dest[2] = a[2] * s;
	dest[3] = a[3] * s;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.divideScalarOp = function(a,s) {
	var s1 = 1 / s;
	var this1 = new Float32Array(4);
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	var dest = this1;
	dest[0] = a[0] * s1;
	dest[1] = a[1] * s1;
	dest[2] = a[2] * s1;
	dest[3] = a[3] * s1;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.distanceSquared = function(a,b) {
	return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]) + (a[3] - b[3]) * (a[3] - b[3]);
};
glm__$Vec4_Vec4_$Impl_$.distance = function(a,b) {
	return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]) + (a[3] - b[3]) * (a[3] - b[3]));
};
glm__$Vec4_Vec4_$Impl_$.dot = function(a,b) {
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};
glm__$Vec4_Vec4_$Impl_$.normalize = function(v,dest) {
	var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);
	var mult = 0;
	if(length >= glm_GLM.EPSILON) {
		mult = 1 / length;
	}
	dest[0] = v[0] * mult;
	dest[1] = v[1] * mult;
	dest[2] = v[2] * mult;
	dest[3] = v[3] * mult;
	return dest;
};
glm__$Vec4_Vec4_$Impl_$.lerp = function(a,b,t,dest) {
	var a1 = a[0];
	dest[0] = a1 + t * (b[0] - a1);
	var a2 = a[1];
	dest[1] = a2 + t * (b[1] - a2);
	var a3 = a[2];
	dest[2] = a3 + t * (b[2] - a3);
	var a4 = a[3];
	dest[3] = a4 + t * (b[3] - a4);
	return dest;
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var headbutt_EvolveResult = { __ename__ : true, __constructs__ : ["NoIntersection","FoundIntersection","StillEvolving"] };
headbutt_EvolveResult.NoIntersection = ["NoIntersection",0];
headbutt_EvolveResult.NoIntersection.__enum__ = headbutt_EvolveResult;
headbutt_EvolveResult.FoundIntersection = ["FoundIntersection",1];
headbutt_EvolveResult.FoundIntersection.__enum__ = headbutt_EvolveResult;
headbutt_EvolveResult.StillEvolving = ["StillEvolving",2];
headbutt_EvolveResult.StillEvolving.__enum__ = headbutt_EvolveResult;
var headbutt_Headbutt3D = function() {
	this.maxIterations = 20;
};
headbutt_Headbutt3D.__name__ = true;
headbutt_Headbutt3D.prototype = {
	calculateSupport: function(direction) {
		var this1 = new Float32Array(4);
		this1[0] = 0;
		this1[1] = 0;
		this1[2] = 0;
		var dest = this1;
		dest[0] = direction[0] * -1;
		dest[1] = direction[1] * -1;
		dest[2] = direction[2] * -1;
		var oppositeDirection = dest;
		var src = this.shapeA.support(direction);
		var this2 = new Float32Array(4);
		this2[0] = 0;
		this2[1] = 0;
		this2[2] = 0;
		var dest1 = this2;
		dest1[0] = src[0];
		dest1[1] = src[1];
		dest1[2] = src[2];
		var newVertex = dest1;
		var b = this.shapeB.support(oppositeDirection);
		newVertex[0] -= b[0];
		newVertex[1] -= b[1];
		newVertex[2] -= b[2];
		return newVertex;
	}
	,addSupport: function(direction) {
		var newVertex = this.calculateSupport(direction);
		this.vertices.push(newVertex);
		return direction[0] * newVertex[0] + direction[1] * newVertex[1] + direction[2] * newVertex[2] >= 0;
	}
	,evolveSimplex: function() {
		var _g = this.vertices.length;
		switch(_g) {
		case 0:
			var a = this.shapeB.get_centre();
			var b = this.shapeA.get_centre();
			var this1 = new Float32Array(4);
			this1[0] = 0;
			this1[1] = 0;
			this1[2] = 0;
			var dest = this1;
			dest[0] = a[0] - b[0];
			dest[1] = a[1] - b[1];
			dest[2] = a[2] - b[2];
			this.direction = dest;
			break;
		case 1:
			var a1 = this.direction;
			var this2 = new Float32Array(4);
			this2[0] = 0;
			this2[1] = 0;
			this2[2] = 0;
			var dest1 = this2;
			dest1[0] = a1[0] * -1;
			dest1[1] = a1[1] * -1;
			dest1[2] = a1[2] * -1;
			this.direction = dest1;
			break;
		case 2:
			var a2 = this.vertices[1];
			var b1 = this.vertices[0];
			var this3 = new Float32Array(4);
			this3[0] = 0;
			this3[1] = 0;
			this3[2] = 0;
			var dest2 = this3;
			dest2[0] = a2[0] - b1[0];
			dest2[1] = a2[1] - b1[1];
			dest2[2] = a2[2] - b1[2];
			var ab = dest2;
			var a3 = this.vertices[0];
			var this4 = new Float32Array(4);
			this4[0] = 0;
			this4[1] = 0;
			this4[2] = 0;
			var dest3 = this4;
			dest3[0] = a3[0] * -1;
			dest3[1] = a3[1] * -1;
			dest3[2] = a3[2] * -1;
			var a0 = dest3;
			var this5 = new Float32Array(4);
			this5[0] = 0;
			this5[1] = 0;
			this5[2] = 0;
			var dest4 = this5;
			var this6 = new Float32Array(4);
			this6[0] = ab[1] * a0[2] - ab[2] * a0[1];
			this6[1] = ab[2] * a0[0] - ab[0] * a0[2];
			this6[2] = ab[0] * a0[1] - ab[1] * a0[0];
			dest4 = this6;
			var tmp = dest4;
			var dest5 = this.direction;
			var this7 = new Float32Array(4);
			this7[0] = tmp[1] * ab[2] - tmp[2] * ab[1];
			this7[1] = tmp[2] * ab[0] - tmp[0] * ab[2];
			this7[2] = tmp[0] * ab[1] - tmp[1] * ab[0];
			dest5 = this7;
			this.direction = dest5;
			break;
		case 3:
			var a4 = this.vertices[2];
			var b2 = this.vertices[0];
			var this8 = new Float32Array(4);
			this8[0] = 0;
			this8[1] = 0;
			this8[2] = 0;
			var dest6 = this8;
			dest6[0] = a4[0] - b2[0];
			dest6[1] = a4[1] - b2[1];
			dest6[2] = a4[2] - b2[2];
			var ac = dest6;
			var a5 = this.vertices[1];
			var b3 = this.vertices[0];
			var this9 = new Float32Array(4);
			this9[0] = 0;
			this9[1] = 0;
			this9[2] = 0;
			var dest7 = this9;
			dest7[0] = a5[0] - b3[0];
			dest7[1] = a5[1] - b3[1];
			dest7[2] = a5[2] - b3[2];
			var ab1 = dest7;
			var this10 = new Float32Array(4);
			this10[0] = 0;
			this10[1] = 0;
			this10[2] = 0;
			var dest8 = this10;
			var this11 = new Float32Array(4);
			this11[0] = ac[1] * ab1[2] - ac[2] * ab1[1];
			this11[1] = ac[2] * ab1[0] - ac[0] * ab1[2];
			this11[2] = ac[0] * ab1[1] - ac[1] * ab1[0];
			dest8 = this11;
			this.direction = dest8;
			var a6 = this.vertices[0];
			var this12 = new Float32Array(4);
			this12[0] = 0;
			this12[1] = 0;
			this12[2] = 0;
			var dest9 = this12;
			dest9[0] = a6[0] * -1;
			dest9[1] = a6[1] * -1;
			dest9[2] = a6[2] * -1;
			var a01 = dest9;
			var a7 = this.direction;
			if(a7[0] * a01[0] + a7[1] * a01[1] + a7[2] * a01[2] < 0) {
				var a8 = this.direction;
				var this13 = new Float32Array(4);
				this13[0] = 0;
				this13[1] = 0;
				this13[2] = 0;
				var dest10 = this13;
				dest10[0] = a8[0] * -1;
				dest10[1] = a8[1] * -1;
				dest10[2] = a8[2] * -1;
				this.direction = dest10;
			}
			break;
		case 4:
			var a9 = this.vertices[3];
			var b4 = this.vertices[0];
			var this14 = new Float32Array(4);
			this14[0] = 0;
			this14[1] = 0;
			this14[2] = 0;
			var dest11 = this14;
			dest11[0] = a9[0] - b4[0];
			dest11[1] = a9[1] - b4[1];
			dest11[2] = a9[2] - b4[2];
			var da = dest11;
			var a10 = this.vertices[3];
			var b5 = this.vertices[1];
			var this15 = new Float32Array(4);
			this15[0] = 0;
			this15[1] = 0;
			this15[2] = 0;
			var dest12 = this15;
			dest12[0] = a10[0] - b5[0];
			dest12[1] = a10[1] - b5[1];
			dest12[2] = a10[2] - b5[2];
			var db = dest12;
			var a11 = this.vertices[3];
			var b6 = this.vertices[2];
			var this16 = new Float32Array(4);
			this16[0] = 0;
			this16[1] = 0;
			this16[2] = 0;
			var dest13 = this16;
			dest13[0] = a11[0] - b6[0];
			dest13[1] = a11[1] - b6[1];
			dest13[2] = a11[2] - b6[2];
			var dc = dest13;
			var a12 = this.vertices[3];
			var this17 = new Float32Array(4);
			this17[0] = 0;
			this17[1] = 0;
			this17[2] = 0;
			var dest14 = this17;
			dest14[0] = a12[0] * -1;
			dest14[1] = a12[1] * -1;
			dest14[2] = a12[2] * -1;
			var d0 = dest14;
			var this18 = new Float32Array(4);
			this18[0] = 0;
			this18[1] = 0;
			this18[2] = 0;
			var dest15 = this18;
			var this19 = new Float32Array(4);
			this19[0] = da[1] * db[2] - da[2] * db[1];
			this19[1] = da[2] * db[0] - da[0] * db[2];
			this19[2] = da[0] * db[1] - da[1] * db[0];
			dest15 = this19;
			var abdNorm = dest15;
			var this20 = new Float32Array(4);
			this20[0] = 0;
			this20[1] = 0;
			this20[2] = 0;
			var dest16 = this20;
			var this21 = new Float32Array(4);
			this21[0] = db[1] * dc[2] - db[2] * dc[1];
			this21[1] = db[2] * dc[0] - db[0] * dc[2];
			this21[2] = db[0] * dc[1] - db[1] * dc[0];
			dest16 = this21;
			var bcdNorm = dest16;
			var this22 = new Float32Array(4);
			this22[0] = 0;
			this22[1] = 0;
			this22[2] = 0;
			var dest17 = this22;
			var this23 = new Float32Array(4);
			this23[0] = dc[1] * da[2] - dc[2] * da[1];
			this23[1] = dc[2] * da[0] - dc[0] * da[2];
			this23[2] = dc[0] * da[1] - dc[1] * da[0];
			dest17 = this23;
			var cadNorm = dest17;
			if(abdNorm[0] * d0[0] + abdNorm[1] * d0[1] + abdNorm[2] * d0[2] > 0) {
				HxOverrides.remove(this.vertices,this.vertices[2]);
				this.direction = abdNorm;
			} else if(bcdNorm[0] * d0[0] + bcdNorm[1] * d0[1] + bcdNorm[2] * d0[2] > 0) {
				HxOverrides.remove(this.vertices,this.vertices[0]);
				this.direction = bcdNorm;
			} else if(cadNorm[0] * d0[0] + cadNorm[1] * d0[1] + cadNorm[2] * d0[2] > 0) {
				HxOverrides.remove(this.vertices,this.vertices[1]);
				this.direction = cadNorm;
			} else {
				return headbutt_EvolveResult.FoundIntersection;
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Can't have simplex with " + this.vertices.length + " verts!");
		}
		if(this.addSupport(this.direction)) {
			return headbutt_EvolveResult.StillEvolving;
		} else {
			return headbutt_EvolveResult.NoIntersection;
		}
	}
	,test: function(shapeA,shapeB) {
		this.vertices = [];
		this.shapeA = shapeA;
		this.shapeB = shapeB;
		var result = headbutt_EvolveResult.StillEvolving;
		var iterations = 0;
		while(iterations < this.maxIterations && result == headbutt_EvolveResult.StillEvolving) {
			result = this.evolveSimplex();
			++iterations;
		}
		return result == headbutt_EvolveResult.FoundIntersection;
	}
	,__class__: headbutt_Headbutt3D
};
var headbutt_Shape3D = function() { };
headbutt_Shape3D.__name__ = true;
headbutt_Shape3D.prototype = {
	__class__: headbutt_Shape3D
};
var headbutt_shapes_Polygon3D = function(vertices) {
	this.vertices = vertices;
};
headbutt_shapes_Polygon3D.__name__ = true;
headbutt_shapes_Polygon3D.__interfaces__ = [headbutt_Shape3D];
headbutt_shapes_Polygon3D.prototype = {
	get_centre: function() {
		var this1 = new Float32Array(4);
		this1[0] = 0;
		this1[1] = 0;
		this1[2] = 0;
		var c = this1;
		var count = 0.0;
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			c[0] += v[0];
			c[1] += v[1];
			c[2] += v[2];
			count += 1.0;
		}
		var s = 1.0 / count;
		c[0] *= s;
		c[1] *= s;
		c[2] *= s;
		return c;
	}
	,set_centre: function(c) {
		var diff = this.get_centre();
		diff[0] = c[0] - diff[0];
		diff[1] = c[1] - diff[1];
		diff[2] = c[2] - diff[2];
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var vert = _g1[_g];
			++_g;
			vert[0] += diff[0];
			vert[1] += diff[1];
			vert[2] += diff[2];
		}
		return c;
	}
	,support: function(direction) {
		var furthestDistance = -Infinity;
		var furthestVertex = null;
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var distance = v[0] * direction[0] + v[1] * direction[1] + v[2] * direction[2];
			if(distance > furthestDistance) {
				furthestDistance = distance;
				furthestVertex = v;
			}
		}
		return furthestVertex;
	}
	,__class__: headbutt_shapes_Polygon3D
};
var headbutt_shapes_Sphere = function(centre,radius) {
	this.set_centre(centre);
	this.radius = radius;
};
headbutt_shapes_Sphere.__name__ = true;
headbutt_shapes_Sphere.__interfaces__ = [headbutt_Shape3D];
headbutt_shapes_Sphere.prototype = {
	get_centre: function() {
		return this._centre;
	}
	,set_centre: function(c) {
		return this._centre = c;
	}
	,support: function(direction) {
		var src = this.get_centre();
		var this1 = new Float32Array(4);
		this1[0] = 0;
		this1[1] = 0;
		this1[2] = 0;
		var dest = this1;
		dest[0] = src[0];
		dest[1] = src[1];
		dest[2] = src[2];
		var c = dest;
		var this2 = new Float32Array(4);
		this2[0] = 0;
		this2[1] = 0;
		this2[2] = 0;
		var dest1 = this2;
		var length = Math.sqrt(direction[0] * direction[0] + direction[1] * direction[1] + direction[2] * direction[2]);
		var mult = 0;
		if(length >= glm_GLM.EPSILON) {
			mult = 1 / length;
		}
		dest1[0] = direction[0] * mult;
		dest1[1] = direction[1] * mult;
		dest1[2] = direction[2] * mult;
		var d = dest1;
		var s = this.radius;
		d[0] *= s;
		d[1] *= s;
		d[2] *= s;
		c[0] += d[0];
		c[1] += d[1];
		c[2] += d[2];
		return c;
	}
	,__class__: headbutt_shapes_Sphere
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var js_three__$ArrayLike_ArrayLike_$Impl_$ = {};
js_three__$ArrayLike_ArrayLike_$Impl_$.__name__ = true;
js_three__$ArrayLike_ArrayLike_$Impl_$.get = function(this1,key) {
	return this1[key];
};
js_three__$ArrayLike_ArrayLike_$Impl_$.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
glm_GLM.EPSILON = 0.0000001;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
